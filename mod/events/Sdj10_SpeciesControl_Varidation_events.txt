namespace = SdjEvent

#############################################
#############################################
#####									#####
#####	Species Discrimination on Job	#####
#####									#####
#####	Regular Varidation Events		#####
#####									#####
#############################################
#############################################

############################################################
### Modifier Control, Regular Validation of Species Flag ###
############################################################
### on_monthly_pulse
country_event = {
	id = SdjEvent.0101
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		### Validation of Species Flag: Copy Flag to same_species
		every_playable_country = {
			limit = { is_ai = no }
			### Remove Pop Modifier (Happiness)
			every_owned_pop = {
				limit = {
					OR = {
						has_modifier = SdjModifierBannedFromRank3a
						has_modifier = SdjModifierBannedFromRank3b
						has_modifier = SdjModifierBannedFromRank3c
						has_modifier = SdjModifierBannedFromRank2a
						has_modifier = SdjModifierBannedFromRank2b
						has_modifier = SdjModifierBannedFromRank2c
					}
				}
				switch = { trigger = has_modifier
					SdjModifierBannedFromRank3a = { remove_modifier = SdjModifierBannedFromRank3a }
					SdjModifierBannedFromRank3b = { remove_modifier = SdjModifierBannedFromRank3b }
					SdjModifierBannedFromRank3c = { remove_modifier = SdjModifierBannedFromRank3c }
					SdjModifierBannedFromRank2a = { remove_modifier = SdjModifierBannedFromRank2a }
					SdjModifierBannedFromRank2b = { remove_modifier = SdjModifierBannedFromRank2b }
					SdjModifierBannedFromRank2c = { remove_modifier = SdjModifierBannedFromRank2c }
				}
			}
			country_event = { id = SdjEvent.0102 }
		}

		### Add Pop Modifier (Happiness)
		every_playable_country = {
			limit = { SdjTriggerAvailableCountryRegular = yes }
			every_owned_pop = {
				limit = {
					# SdjTriggerPotentialHappinessModifier
					NOR = {
						is_enslaved = yes
						is_being_purged = yes
						is_being_assimilated = yes
					}
					OR = {
						SdjTriggerBannedFromRank3_Common = yes
						SdjTriggerBannedFromRank2_Common = yes
					}
					NOR = {
						planet = { has_planet_flag = SdjFlagDeregulationOfJob@prevprev }
						SdjTriggerLivingStandardRank4 = yes
					}
				}
				if = {
					limit = { SdjTriggerBannedFromRank3_Common = yes }
					if = {
						limit = { SdjTriggerLivingStandardRank3a = yes }
						add_modifier = { modifier = SdjModifierBannedFromRank3a days = -1 }
					} else_if = {
						limit = { SdjTriggerLivingStandardRank1 = yes }
						add_modifier = { modifier = SdjModifierBannedFromRank3c days = -1 }
					} else = { add_modifier = { modifier = SdjModifierBannedFromRank3b days = -1 } }
				}
				if = {
					limit = { SdjTriggerBannedFromRank2_Common = yes }
					if = {
						limit = { SdjTriggerLivingStandardRank3b = yes }
						add_modifier = { modifier = SdjModifierBannedFromRank2a days = -1 }
					} else_if = {
						limit = {
							OR = {
								SdjTriggerLivingStandardRank1 = yes
								AND = {
									has_living_standard = { type = living_standard_academic_privilege }
									SdjTriggerBannedFromRank3_Common = yes
								}
							}
						}
						add_modifier = { modifier = SdjModifierBannedFromRank2c days = -1 }
					} else = { add_modifier = { modifier = SdjModifierBannedFromRank2b days = -1 } }
				}
			}
		}

		### Control Planet Modifier
		every_playable_country = {
			limit = { any_owned_planet = {} }
			every_owned_planet = {
				if = {
					limit = {
						NOT = { has_planet_flag = SdjFlagDeregulationOfJob@prev }
						OR = {
							has_modifier = SdjModifierDeregulationOfJobRegular
							has_modifier = SdjModifierDeregulationOfJobGestalt
						}
					}
					remove_modifier = SdjModifierDeregulationOfJobRegular
					remove_modifier = SdjModifierDeregulationOfJobGestalt
				} else_if = {
					limit = {
						has_planet_flag = SdjFlagDeregulationOfJob@prev
						prev = { SdjTriggerAvailableCountryRegular = yes }
						NOT = { has_modifier = SdjModifierDeregulationOfJobRegular }
					}
					add_modifier = { modifier = SdjModifierDeregulationOfJobRegular days = -1 }
					remove_modifier = SdjModifierDeregulationOfJobGestalt
				} else_if = {
					limit = {
						has_planet_flag = SdjFlagDeregulationOfJob@prev
						prev = { SdjTriggerAvailableCountryGestalt = yes }
						NOT = { has_modifier = SdjModifierDeregulationOfJobGestalt }
					}
					remove_modifier = SdjModifierDeregulationOfJobRegular
					add_modifier = { modifier = SdjModifierDeregulationOfJobGestalt days = -1 }
				}
			}
		}
	}
}

### Validation of Species Flag: Copy Flag to same_species
# (on_monthly_pulse from SdjEvent.0101 )
country_event = {
	id = SdjEvent.0102
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		### Set Flag of Sub-Species Modified Separately
		every_owned_pop_species = {
			limit = { has_species_flag = SdjFlagSubSpeciesModified_@root }
			if = {
				limit = { NOT = { has_species_flag = SdjFlagVaridationFinished@root } }
				root = {
					every_owned_pop_species = {
						limit = { is_same_species = prevprev }
						set_timed_species_flag = { flag = SdjFlagVaridationFinished@root days = 3 }
						set_species_flag = SdjFlagSubSpeciesModified_@root
					}
				}
			}
		}
		### Synchlorinze New Species with Preexisting Species
		every_owned_pop_species = {
			limit = {
				SdjTriggerSubSpeciesModifiable = no
				has_species_flag = SdjFlagForbiddenSeparately_@root
			}
			if = {
				limit = { NOT = { has_species_flag = SdjFlagVaridationFinished@root } }
				root = {
					every_owned_pop_species = {
						limit = { is_same_species = prevprev }
						set_timed_species_flag = { flag = SdjFlagVaridationFinished@root days = 3 }
						if = {
							limit = { has_species_flag = SdjFlagForbiddenSeparately_@root }
							if = {
								limit = { has_global_flag = SdjFlagExpansionPatchEnabled }
								prevprev = { prev = { SdjEffectCopySpeciesJobRightSeparately = yes } }
							} else = { prevprev = { prev = { SdjEffectCopySpeciesJobRightCategory = yes } } }
						}
					}
				}
			}
		}
		### Clean Up
		every_owned_pop_species = {
			limit = { has_species_flag = SdjFlagVaridationFinished@root }
			remove_species_flag = SdjFlagVaridationFinished@root
		}
	}
}
